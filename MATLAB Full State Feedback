
clc, clear all, close all;

% Define system matrices
g = 9.81
r = 0.5
m1 = 2
m2 = 1
l = 1
lc = 0.25*l
mbar = m1*lc+m2*l
J1 = (1/3)*m1*l^2
J2 = (1/2)*m2*r^2


A = [0 1 0; mbar*g/(J2*(1-m1*lc^2+m2*l^2+J1+J2)) 0 0; -mbar*g/(J2*(1-m1*lc^2+m2*l^2+J1+J2)) 0 0]
B = [0; 1/J2+(m1*lc^2+m2*l^2+J1+J2)/(J2*(1-m1*lc^2+m2*l^2+J1+J2)); -(m1*lc^2+m2*l^2+J1+J2)/(J2*(1-m1*lc^2+m2*l^2+J1+J2))] 
C = [1 0 0];
D = 0;


check1 = A(2,1)
check2 = A(3,1)
check3 = B(2,1)
check4 = B(3,1)
% Create state space object
sys = ss(A,B,C,D);

% Check open-loop eigenvalues
E = eig(A);

% Desired closed-loop eigenvalues
P = [0, -0.5, -1.5];

% Solve for K using pole placement
K = place(A,B,P);

% Check for closed-loop eigenvalues
Acl = A-B*K;
Ecl = eig(Acl);
detAcl = det(Acl)

% Closed-loop system
syscl = ss(Acl, B, C, D);

Kr = 1/dcgain(syscl);
syscl_scaled = ss(Acl, B*Kr, C, D);

% Step response of the system
%step(syscl);
step(syscl_scaled);
%step(sys)
